package Hello

import AbilityObjEditing
import Assets
import ClosureEvents
import ClosureTimers
import ClosureForGroups
import GameTimer
import HashMap
import ItemObjEditing
import LinkedListModule
import ObjectIds
import PlayerApi
import UnitAnimations
import WurstSimError

constant ID_LAVASPAWN = 'Hlsp'
constant ID_SKARCHER  = 'Harc'
constant ID_LMANIP    = 'Hlmn'
constant ID_SKMANIP   = 'Hsmn'
constant ID_INDICATOR = 'Hind'

constant ID_LAVAMISSILE   = 'Zlvm'
constant ID_ARCHERMISSILE = 'Zarm'
constant ID_MANIPULATE = 'Zmni'
constant ID_FREEZE     = 'Zfrz'
constant ID_UNSUMMON   = 'Zuns'

constant ID_FLAG = 'flag'
constant ID_LEGO = 'lego'

constant ID_WALL = 'wall'

constant SAFE_LOC = vec2(-3585., 3585.)

constant BASE_RADIUS = 128. + 16.

interface DestrIface
	function check_destr(Missile m) returns bool

class Missile
	use LinkedListModule

	static constant clock = CreateTimer()

	unit owner
	vec3 vel
	vec3 accel
	effect mdl
	DestrIface des

	ondestroy
		destroy des
		mdl.destr()

	construct(unit owner, string path, vec3 start, vec3 vel, vec3 accel, DestrIface des)
		this.owner = owner
		this.vel = vel
		this.accel = accel
		this.mdl = addEffect(path, start)
		this.des = des

		if size == 1
			clock.startPeriodic(ANIMATION_PERIOD) ->
				let iter = staticItr()
				while iter.hasNext()
					let missile = iter.next()

					missile.vel += missile.accel

					missile.mdl.setPos(missile.mdl.getPos3() + missile.vel)

					if missile.des.check_destr(missile)
						destroy missile

				if size == 0
					clock.pause()

class UnsummonChan
	use LinkedListModule

	static constant clock = CreateTimer()

	unit owner
	unit target
	int order
	effect fx

	ondestroy
		this.fx.destr()

	construct(unit owner, unit target, int order)
		this.owner = owner
		this.target = target
		this.order = order
		this.fx = addEffect(Abilities.unsummonTarget, target.getPos())

		if size == 1
			clock.startPeriodic(ANIMATION_PERIOD) ->
				let iter = staticItr()
				while iter.hasNext()
					let inst = iter.next()

					let tick = inst.target.getMaxHP() * ANIMATION_PERIOD / 10.

					if inst.target.getHP() < tick + 1.
						let pos = inst.target.getPos()
						flashEffect(Abilities.lightningShieldTarget, pos)
						inst.target.remove()
						inst.target = null
						createItem(ID_LEGO, pos)
					else
						inst.target.subHP(tick)

					if inst.target == null or inst.owner.getCurrentOrder() != inst.order
						destroy inst

				if size == 0
					clock.pause()


constant activeHeroes = new HashMap<player, SelectData>()
constant flag_provenence = new HashMap<item, effect>()

constant red_base = genBase(ZERO2.polarOffset(angle(5. * PI / 4),  2000.), color(100, 0, 0))
constant grn_base = genBase(ZERO2.polarOffset(angle(5. * PI / 4), -2000.), color(0, 100, 0))

class Manipulate
	use LinkedListModule

	static constant clock = CreateTimer()

	unit owner
	item manipulated
	real dist

	ondestroy
		owner..removeAbility(ID_FREEZE)..addAbility(ID_MANIPULATE)

	static function freeze(unit u)
		let iter = staticItr()
		while iter.hasNext()
			let inst = iter.next()

			if inst.owner == u
				let pos = inst.manipulated.getPos()

				if pos.distanceToSq(red_base.getPos()) < BASE_RADIUS * BASE_RADIUS or pos.distanceToSq(grn_base.getPos()) < BASE_RADIUS * BASE_RADIUS
					simError(inst.owner.getOwner(), "Can't freeze there")
				else
					inst.manipulated.remove()
					createUnit(Player(PLAYER_NEUTRAL_PASSIVE), ID_WALL, pos, angle(3. * PI / 2.))
					destroy inst

		if size == 0
			clock.pause()

	construct(unit owner, item manipulated)
		this.owner = owner
		this.manipulated = manipulated
		this.dist = owner.getPos().distanceTo(manipulated.getPos())
		owner..removeAbility(ID_MANIPULATE)

		if manipulated.getTypeId() != ID_FLAG
			owner.addAbility(ID_FREEZE)

		if size == 1
			clock.startPeriodic(ANIMATION_PERIOD) ->
				let iter = staticItr()
				while iter.hasNext()
					let instance = iter.next()
					let home = activeHeroes.get(instance.owner.getOwner()).homebase

					if (
						instance.manipulated.getTypeId() == ID_FLAG
						and flag_provenence.get(instance.manipulated) != home
						and instance.manipulated.getPos().distanceToSq(home.getPos()) < BASE_RADIUS * BASE_RADIUS
					)
						instance.owner..setInvulnerable(true)..pause()
						flashEffect(Abilities.lightningBoltMissile, instance.manipulated.getPos())
						flashEffect(Abilities.resurrectcaster, instance.manipulated.getPos())
						print((home == red_base ? "Red".colored(COLOR_GOLD) : "Green".colored(COLOR_GOLD)) + " team victorious!")
						destroy instance
						doAfter(10.) ->
							(home == red_base ? red_players : green_players).forEach() p ->
								RemovePlayer(p, PLAYER_GAME_RESULT_VICTORY)
							EndGame(true)

					else if not instance.manipulated.isAlive() or not instance.owner.isAlive() or activeHeroes.get(instance.owner.getOwner()).which != instance.owner
						destroy instance
					else
						instance.manipulated.setPos(
							instance.owner.getPos().polarOffset(instance.owner.getFacingAngle(), instance.dist)
						)

function string.colored(colorA c) returns string
	return c.toColorString() + this + "|r"


class Wall extends UnitDefinition
	construct(int id)
		super(id, 'hmtt')
		setAttacksEnabled(0)
		setSpeedBase(0)
		setModelFile(Buildings.towerDefenseTower)
		setName("Wallerino")

class LavaSpawn extends HeroDefinition
	construct(int id)
		super(id, 'Hpal')
		setModelFile(Units.lavaSpawn)
		setIconGameInterface(Icons.bTNLavaSpawn)
		setUnitSoundSet("LavaSpawn")
		setAttacksEnabled(0)
		setProperNames("Pokemon")
		setProperNamesUsed(1)
		setHeroAbilities("")
		setSightRadiusNight(1000)
		setName("Executor")
		setNormalAbilities(commaList(ID_LAVAMISSILE))
		setAnimationCastBackswing(0.)
		setAnimationCastPoint(0.)

class Skarcher extends LavaSpawn
	construct(int id)
		super(id)
		setModelFile(Units.skeletonArcher1)
		setIconGameInterface(Icons.bTNSkeletonArcher)
		setUnitSoundSet("SkeletonArcher")

class Indicator extends LavaSpawn
	construct(int id)
		super(id)
		setModelFile("none.mdl")
		setIconGameInterface(Icons.bTNWindWalkOff)
		setHitPointsMaximumBase(100)
		setStrengthPerLevel(0)
		setStartingStrength(0)
		setHitPointsRegenerationRate(10.)
		setManaMaximum(0)
		setIntelligencePerLevel(0)
		setStartingIntelligence(0)

class LavaManipulator extends LavaSpawn
	construct(int id)
		super(id)
		setModelFile(Units.demoness1)
		setIconGameInterface(Icons.bTNDemoness)
		setUnitSoundSet("Demoness")
		setName("Manipulator")
		setNormalAbilities(commaList(ID_MANIPULATE, ID_UNSUMMON))

class SkeletonManipulator extends LavaManipulator
	construct(int id)
		super(id)
		setModelFile(Units.skeletonOrc1)
		setIconGameInterface(Icons.bTNSkeletalOrcChampion)
		setUnitSoundSet("Skeleton")

class LavaMissile extends AbilityDefinitionIllidanChannel
	construct(int id)
		super(id)
		presetArtDuration(int lvl -> 0.)
		presetDisableOtherAbilities(int lvl -> false)
		presetFollowThroughTime(int lvl -> 0.)
		presetTargetType(int lvl -> 2)  // Point target.
		presetOptions(int lvl -> 1)     // Visible.
		setName("Missile")
		presetTooltipNormal(int lvl -> "Loose Missile - " + "Q".colored(COLOR_GOLD))
		presetTooltipNormalExtended(int lvl -> "Launch a projectile in the target direction, which deals damage on-hit.")
		setIconNormal(Icons.bTNPoisonArrow)
		presetCooldown(lvl int -> 2.5)
		setButtonPositionNormalX(0)
		setButtonPositionNormalY(2)
		setHotkeyNormal("Q")
		presetCastRange(int lvl -> 2000.)
		setArtTarget("")
		setArtCaster("")
		setArtEffect("")
		presetCastingTime(lvl -> 0.)

class ManipulateItem extends LavaMissile
	construct(int id)
		super(id)
		presetTargetType(int lvl -> 1)  // Unit target.
		setName("Manipulate")
		presetTooltipNormal(int lvl -> "Manipulate - " + "Q".colored(COLOR_GOLD))
		presetTooltipNormalExtended(int lvl -> "Take control of a target item.")
		setIconNormal(Icons.bTNGlove)
		presetCastRange(int lvl -> 196.)
		presetTargetsAllowed(leve -> "item")

class Unsummon extends ManipulateItem
	construct(int id)
		super(id)
		setOrderStringUseTurnOn("acidbomb")
		presetBaseOrderID(int lvl -> "acidbomb")
		presetTargetType(int lvl -> 1)  // Unit target.
		setName("Unsummon")
		presetTooltipNormal(int lvl -> "Unsummon - " + "W".colored(COLOR_GOLD))
		presetTooltipNormalExtended(int lvl -> "Deconstruct a wall while channeling.")
		setIconNormal(Icons.bTNUnsummonBuilding)
		setHotkeyNormal("W")
		presetFollowThroughTime(int lvl -> 10.)
		presetTargetsAllowed(int lvl -> "neutral")
		setButtonPositionNormalX(1)

class FreezeItem extends ManipulateItem
	construct(int id)
		super(id)
		presetTargetType(int lvl -> 0)  // No target.
		setName("Freeze")
		presetTooltipNormal(int lvl -> "Freeze - " + "Q".colored(COLOR_GOLD))
		presetTooltipNormalExtended(int lvl -> "Freeze this item into a structure.")
		setIconNormal(Icons.bTNSpellSteal)

class Manipulatable extends ItemDefinition
	construct(int id)
		super(id, 'crys')
		setName("Lego")
		setDescription("Manipulatable")

class Flag extends Manipulatable
	construct(int id)
		super(id)
		setName("Flag")
		setDescription("What a flag")
		setModelUsed(Objects.humanCaptureFlag)

@compiletime function gen()
	new LavaSpawn(ID_LAVASPAWN)
	new Skarcher(ID_SKARCHER)

	new LavaManipulator(ID_LMANIP)
	new SkeletonManipulator(ID_SKMANIP)

	new Indicator(ID_INDICATOR)
	
	new LavaMissile(ID_LAVAMISSILE)
	new ManipulateItem(ID_MANIPULATE)

	new Flag(ID_FLAG)
	new Manipulatable(ID_LEGO)
	new FreezeItem(ID_FREEZE)
	new Unsummon(ID_UNSUMMON)

	new Wall(ID_WALL)


class BoolRef
	bool val

	construct(bool val)
		this.val = val

class SelectData
	unit which
	real when
	unit indicator
	effect homebase

	construct(unit which, unit indicator, effect homebase)
		this.which = which
		this.when = -10.
		this.indicator = indicator
		this.homebase = homebase

function unit.hideish()
	this..setXY(SAFE_LOC)
		..setVertexColor(colorA(255, 255, 255, 0))
		..setInvulnerable(true)
		..pause()

function unit.showish(vec2 where)
	this..setPos(where)
		..setVertexColor(colorA(255, 255, 255, 255))
		..setInvulnerable(false)
		..unpause()

function genBase(vec2 pos, color kolor) returns effect
	let fx = addEffect(Buildings.circleOfPower1, pos)
		..setColor(kolor)
		..setScale(2.5)
	
	let count = 20
	for i = 0 to (count - 1)
		createItem(ID_LEGO, pos.polarOffset(angle(2. * i * PI / count), BASE_RADIUS))
	flag_provenence.put(createItem(ID_FLAG, pos), fx)

	return fx

init
	SetTimeOfDayScale(0.)

	red_players.forEach() (player t) ->
		let u = createUnit(t, ID_LAVASPAWN, t.getStartLocation(), angle(3. * PI / 2.))
		t.selectSingle(u)
		createUnit(t, ID_LMANIP, ZERO2, angle(0.))..hideish()
		activeHeroes.put(t, new SelectData(u, createUnit(t, ID_INDICATOR, ZERO2, angle(0.))..hideish(), red_base))

	green_players.forEach() (player t) ->
		let u = createUnit(t, ID_SKARCHER, t.getStartLocation(), angle(3. * PI / 2.))
		t.selectSingle(u)
		createUnit(t, ID_SKMANIP, ZERO2, angle(0.))..hideish()
		activeHeroes.put(t, new SelectData(u, createUnit(t, ID_INDICATOR, ZERO2, angle(0.))..hideish(), grn_base))

	StopMusic(false)

	registerPlayerUnitEvent(EVENT_PLAYER_HERO_REVIVABLE) ->
		GetTriggerPlayer().selectSingle(
			GetTriggerUnit()..revive(GetTriggerUnit().getOwner().getStartLocation(), true)
		)

	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELECTED) ->
		let u = GetTriggerUnit()
		let p = GetTriggerPlayer()

		if u.isType(UNIT_TYPE_HERO) and u.getOwner() == p
			let data = activeHeroes.get(p)

			if u != data.which
				let now = getElapsedGameTime()

				if u.getTypeId() == ID_INDICATOR or not data.which.isAlive()
					p.selectSingle(data.which)

				if now > data.when + 10.
					p.selectSingle(u)
					let pos = data.which.getPos()
					let face = data.which.getFacingAngle()

					let old = data.which
					data.which = u
					old.hideish()

					data.indicator.setHP(0.5)

					data.which = u
					data.when = now

					u..showish(pos)..setFacing(face)

					flashEffect(Abilities.charmTarget, pos)
				else
					p.selectSingle(data.which)
					simError(p, "On cooldown (" + (10. + data.when - now).toString(1) + ")")

	registerSpellEffectEvent(ID_MANIPULATE) ->
		let caster = EventData.getTriggerUnit()
		caster..setAnimation("spell")..queueAnimation("stand")

		new Manipulate(caster, GetSpellTargetItem())

	registerSpellEffectEvent(ID_UNSUMMON) ->
		new UnsummonChan(GetTriggerUnit(), GetSpellTargetUnit(), OrderId("acidbomb"))

	registerSpellEffectEvent(ID_FREEZE) ->
		let caster = EventData.getTriggerUnit()
		caster..setAnimation("spell")..queueAnimation("stand")

		Manipulate.freeze(caster)

	registerSpellEffectEvent(ID_LAVAMISSILE) ->
		let caster = EventData.getTriggerUnit()

		caster.setAnimation(UnitAnimations.LavaSpawn.attack.idx)
		caster.queueAnimation("stand")

		new Missile(
			caster,
			Abilities.lavaSpawnMissile,
			caster.getPos3with(60.).offset2d(caster.getFacingAngle(), 50.),
			ANIMATION_PERIOD * 1400. * caster.getPos().normalizedPointerTo(EventData.getSpellTargetPos()).toVec3(),
			vec3(0., 0., -0.2)
		) m ->
			let ref = new BoolRef(m.mdl.getPos3().z < 0.)

			forUnitsInRange(m.mdl.getPos(), 64.) (unit u) ->
				let neutral = u.getOwner() == Player(PLAYER_NEUTRAL_PASSIVE)

				if u.isEnemyOf(m.owner) or neutral
					m.owner.damageTarget(u, neutral ? min(50., u.getHP() - 1) : 150.)
					ref.val = true
			
			let result = ref.val
			destroy ref

			return result
