package Hello

import AbilityObjEditing
import Assets
import ClosureEvents
import ClosureForGroups
import GameTimer
import HashMap
import ItemObjEditing
import LinkedListModule
import ObjectIds
import PlayerApi
import UnitAnimations
import WurstSimError

constant ID_LAVASPAWN = 'Hlsp'
constant ID_SKARCHER  = 'Harc'
constant ID_LMANIP    = 'Hlmn'
constant ID_SKMANIP   = 'Hsmn'
constant ID_INDICATOR = 'Hind'

constant ID_LAVAMISSILE   = 'Alvm'
constant ID_ARCHERMISSILE = 'Aarm'
constant ID_MANIPULATE = 'Amni'

constant ID_LEGO = 'lego'

constant SAFE_LOC = vec2(-3585., 3585.)

interface DestrIface
	function check_destr(Missile m) returns bool

class Missile
	use LinkedListModule

	static constant clock = CreateTimer()

	unit owner
	vec3 vel
	vec3 accel
	effect mdl
	DestrIface des

	ondestroy
		destroy des
		mdl.destr()

	construct(unit owner, string path, vec3 start, vec3 vel, vec3 accel, DestrIface des)
		this.owner = owner
		this.vel = vel
		this.accel = accel
		this.mdl = addEffect(path, start)
		this.des = des

		if size == 1
			clock.startPeriodic(ANIMATION_PERIOD) ->
				let iter = iterator()
				while iter.hasNext()
					let missile = iter.next()

					missile.vel += missile.accel

					missile.mdl.setPos(missile.mdl.getPos3() + missile.vel)

					if missile.des.check_destr(missile)
						destroy missile

				if size == 0
					clock.pause()


let activeHeroes = new HashMap<player, SelectData>()

class Manipulate
	use LinkedListModule

	static constant clock = CreateTimer()

	unit owner
	item manipulated
	real dist

	construct(unit owner, item manipulated)
		this.owner = owner
		this.manipulated = manipulated
		this.dist = owner.getPos().distanceTo(manipulated.getPos())

		if size == 1
			clock.startPeriodic(ANIMATION_PERIOD) ->
				let iter = iterator()
				while iter.hasNext()
					let instance = iter.next()

					if not instance.manipulated.isAlive() or not instance.owner.isAlive() or activeHeroes.get(instance.owner.getOwner()).which != instance.owner
						destroy instance
					else
						instance.manipulated.setPos(
							instance.owner.getPos().polarOffset(instance.owner.getFacingAngle(), instance.dist)
						)

function string.colored(colorA c) returns string
	return c.toColorString() + this + "|r"

class LavaSpawn extends HeroDefinition
	construct(int id)
		super(id, 'Hpal')
		setModelFile(Units.lavaSpawn)
		setIconGameInterface(Icons.bTNLavaSpawn)
		setUnitSoundSet("LavaSpawn")
		setAttacksEnabled(0)
		setProperNames("Pokemon")
		setProperNamesUsed(1)
		setHeroAbilities("")
		setSightRadiusNight(1000)
		setName("Executor")
		setNormalAbilities(commaList(ID_LAVAMISSILE))
		setAnimationCastBackswing(0.)
		setAnimationCastPoint(0.)

class Skarcher extends LavaSpawn
	construct(int id)
		super(id)
		setModelFile(Units.skeletonArcher1)
		setIconGameInterface(Icons.bTNSkeletonArcher)
		setUnitSoundSet("SkeletonArcher")

class Indicator extends LavaSpawn
	construct(int id)
		super(id)
		setModelFile("none.mdl")
		setIconGameInterface(Icons.bTNWindWalkOff)
		setHitPointsMaximumBase(100)
		setStrengthPerLevel(0)
		setStartingStrength(0)
		setHitPointsRegenerationRate(10.)
		setManaMaximum(0)
		setIntelligencePerLevel(0)
		setStartingIntelligence(0)

class LavaManipulator extends LavaSpawn
	construct(int id)
		super(id)
		setModelFile(Units.demoness1)
		setIconGameInterface(Icons.bTNDemoness)
		setUnitSoundSet("Demoness")
		setName("Manipulator")
		setNormalAbilities(commaList(ID_MANIPULATE))

class SkeletonManipulator extends LavaManipulator
	construct(int id)
		super(id)
		setModelFile(Units.skeletonOrc1)
		setIconGameInterface(Icons.bTNSkeletalOrcChampion)
		setUnitSoundSet("Skeleton")

class LavaMissile extends AbilityDefinitionIllidanChannel
	construct(int id)
		super(id)
		presetArtDuration(int lvl -> 0.)
		presetDisableOtherAbilities(int lvl -> false)
		presetFollowThroughTime(int lvl -> 0.)
		presetTargetType(int lvl -> 2)  // Point target.
		presetOptions(int lvl -> 1)     // Visible.
		setName("Missile")
		presetTooltipNormal(int lvl -> "Loose Missile - " + "Q".colored(COLOR_GOLD))
		presetTooltipNormalExtended(int lvl -> "Launch a projectile in the target direction, which deals damage on-hit.")
		setIconNormal(Icons.bTNPoisonArrow)
		presetCooldown(lvl int -> 2.5)
		setButtonPositionNormalX(0)
		setButtonPositionNormalY(2)
		setHotkeyNormal("Q")
		presetCastRange(int lvl -> 2000.)
		setArtTarget("")
		setArtCaster("")
		setArtEffect("")
		presetCastingTime(lvl -> 0.)

class ManipulateItem extends LavaMissile
	construct(int id)
		super(id)
		presetTargetType(int lvl -> 1) // Unit target.
		setName("Manipulate")
		presetTooltipNormal(int lvl -> "Manipulate - " + "Q".colored(COLOR_GOLD))
		presetTooltipNormalExtended(int lvl -> "Take control of a target item.")
		setIconNormal(Icons.bTNGlove)
		presetCastRange(int lvl -> 200.)
		presetTargetsAllowed(leve -> "item")

class Manipulatable extends ItemDefinition
	construct(int id)
		super(id, 'crys')
		setName("Lego")
		setDescription("Manipulatable")


@compiletime function gen()
	new LavaSpawn(ID_LAVASPAWN)
	new Skarcher(ID_SKARCHER)

	new LavaManipulator(ID_LMANIP)
	new SkeletonManipulator(ID_SKMANIP)

	new Indicator(ID_INDICATOR)
	
	new LavaMissile(ID_LAVAMISSILE)
	new ManipulateItem(ID_MANIPULATE)

	new Manipulatable(ID_LEGO)


class BoolRef
	bool val

	construct(bool val)
		this.val = val

class SelectData
	unit which
	real when
	unit indicator

	construct(unit which, unit indicator)
		this.which = which
		this.when = -10.
		this.indicator = indicator

function unit.hideish()
	this..setXY(SAFE_LOC)
		..setVertexColor(colorA(255, 255, 255, 0))
		..setInvulnerable(true)
		..pause()

function unit.showish(vec2 where)
	this..setPos(where)
		..setVertexColor(colorA(255, 255, 255, 255))
		..setInvulnerable(false)
		..unpause()

function genBase(vec2 pos, color kolor)
	addEffect(Buildings.circleOfPower1, pos)
		..setColor(kolor)
		..setScale(2.)
	
	for _i = 0 to 9
		createItem(ID_LEGO, pos)

init
	redPlayers.forEach() (player t) ->
		let u = createUnit(t, ID_LAVASPAWN, t.getStartLocation(), angle(3. * PI / 2.))
		t.selectSingle(u)
		createUnit(t, ID_LMANIP, ZERO2, angle(0.))..hideish()
		activeHeroes.put(t, new SelectData(u, createUnit(t, ID_INDICATOR, ZERO2, angle(0.))..hideish()))

	greenPlayers.forEach() (player t) ->
		let u = createUnit(t, ID_SKARCHER, t.getStartLocation(), angle(3. * PI / 2.))
		t.selectSingle(u)
		createUnit(t, ID_SKMANIP, ZERO2, angle(0.))..hideish()
		activeHeroes.put(t, new SelectData(u, createUnit(t, ID_INDICATOR, ZERO2, angle(0.))..hideish()))

	StopMusic(false)

	registerPlayerUnitEvent(EVENT_PLAYER_HERO_REVIVABLE) ->
		GetTriggerPlayer().selectSingle(
			GetTriggerUnit()..revive(GetTriggerUnit().getOwner().getStartLocation(), true)
		)

	genBase(ZERO2.polarOffset(angle(5. * PI / 4),  2000.), color(100, 0, 0))
	genBase(ZERO2.polarOffset(angle(5. * PI / 4), -2000.), color(0, 100, 0))

	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELECTED) ->
		let u = GetTriggerUnit()
		let p = GetTriggerPlayer()

		if u.isType(UNIT_TYPE_HERO) and u.getOwner() == p
			let data = activeHeroes.get(p)

			if u != data.which
				let now = getElapsedGameTime()

				if u.getTypeId() == ID_INDICATOR or not data.which.isAlive()
					p.selectSingle(data.which)

				if now > data.when + 10.
					p.selectSingle(u)
					let pos = data.which.getPos()
					let face = data.which.getFacingAngle()

					let old = data.which
					data.which = u
					old.hideish()

					data.indicator.setHP(0.5)

					data.which = u
					data.when = now

					u..showish(pos)..setFacing(face)

					flashEffect(Abilities.charmTarget, pos)
				else
					p.selectSingle(data.which)
					simError(p, "On cooldown (" + (10. + data.when - now).toString(1) + ")")

	registerSpellEffectEvent(ID_MANIPULATE) ->
		let caster = EventData.getTriggerUnit()
		caster..setAnimation("spell")..queueAnimation("stand")

		new Manipulate(caster, GetSpellTargetItem())

	registerSpellEffectEvent(ID_LAVAMISSILE) ->
		let caster = EventData.getTriggerUnit()

		caster.setAnimation(UnitAnimations.LavaSpawn.attack.idx)
		caster.queueAnimation("stand")

		new Missile(
			caster,
			Abilities.lavaSpawnMissile,
			caster.getPos3with(60.).offset2d(caster.getFacingAngle(), 50.),
			ANIMATION_PERIOD * 1400. * caster.getPos().normalizedPointerTo(EventData.getSpellTargetPos()).toVec3(),
			vec3(0., 0., -0.2)
		) m ->
			let ref = new BoolRef(m.mdl.getPos3().z < 0.)

			forUnitsInRange(m.mdl.getPos(), 64.) (unit u) ->
				if u.isEnemyOf(m.owner)
					m.owner.damageTarget(u, 150.)
					ref.val = true
			
			let result = ref.val
			destroy ref

			return result
